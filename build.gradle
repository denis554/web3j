plugins {
    id "com.jfrog.bintray" version "1.7"
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

group 'org.web3j'
version '0.5.2'

sourceCompatibility = 1.8

// We don't want any compiler warnings
compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
compileTestJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

jacoco {
    toolVersion = '0.7.7.201606060606' // See http://www.eclemma.org/jacoco/.
}

jacocoTestReport {
    reports {
        xml.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['org/web3j/abi/datatypes/generated/**'])
        })
    }
}

repositories {
    mavenCentral()
}

// See https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/
// exclude with: gradle clean build -x integrationTest
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'org.apache.httpcomponents:httpclient:4.5.2',
            'com.fasterxml.jackson.core:jackson-databind:2.8.1',
            'org.bouncycastle:bcprov-jdk15on:1.54',
            'com.squareup:javapoet:1.7.0'
    testCompile 'junit:junit:4.11',
            'org.mockito:mockito-core:1.10.19'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }  // always run integration tests regardless of if up to date

    // view status of integration tests
    testLogging {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'maven'
        name = 'org.web3j'
        desc = 'web3j is a lightweight Java library for integration with Ethereum clients'
        userOrg = 'web3j'
        licenses = ['Apache-2.0']
        issueTrackerUrl = 'https://github.com/web3j/web3j/issues'
        vcsUrl = 'https://github.com/web3j/web3j.git'
        websiteUrl = 'http://web3j.org'
        publicDownloadNumbers = true
    }
}
