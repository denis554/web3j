import java.text.SimpleDateFormat

buildscript {
    ext.bouncycastleVersion = '1.54'
    ext.jacksonVersion = '2.8.5'
    ext.javapoetVersion = '1.7.0'
    ext.jnr_unixsocketVersion = '0.15'
    ext.okhttpVersion = '3.8.1'
    ext.rxjavaVersion = '1.2.4'
    ext.scryptVersion = '1.4.0'
    ext.slf4jVersion = '1.7.25'

    // test dependencies
    ext.equalsverifierVersion = '2.1.7'
    ext.junitVersion = '4.11'
    ext.logbackVersion = '1.2.3'
    ext.mockitoVersion = '1.10.19'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}
//
//plugins {
//    id "com.jfrog.bintray" version "1.7.3"
//}

apply plugin: 'java'
apply plugin: 'jacoco'

apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'

allprojects {

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group 'org.web3j'
    version '3.0.0-test'

    apply plugin: 'java'
    apply plugin: 'checkstyle'

    // Required for Maven Nexus repository
    apply plugin: 'maven'

    // Required for JFrog Artifactory repository
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    // We don't want any compiler warnings
    compileJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts {
        archives sourcesJar, javadocJar, testJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier 'sources'
                }

                artifact testJar {
                    classifier 'tests'
                }
            }
        }
    }

    jacoco {
        toolVersion = '0.7.7.201606060606' // See http://www.eclemma.org/jacoco/.
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ['org/web3j/abi/datatypes/generated/**'])
            })
        }
    }

    checkstyle {
        toolVersion = "7.7"
        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        publications = ['mavenJava']
        publish = true
        pkg {
            repo = 'maven'
            name = 'org.web3j'
            desc = 'web3j is a lightweight Java library for integration with Ethereum clients'
            userOrg = 'web3j'
            licenses = ['Apache-2.0']
            issueTrackerUrl = 'https://github.com/web3j/web3j/issues'
            vcsUrl = 'https://github.com/web3j/web3j.git'
            websiteUrl = 'https://web3j.io'
            publicDownloadNumbers = true
        }
    }

    task release {
        dependsOn 'clean'
        dependsOn 'build'
//    dependsOn 'uploadArchives'
//    dependsOn 'closeAndPromoteRepository'
        dependsOn 'bintrayUpload'

        tasks.findByName('build').mustRunAfter 'clean'

//    tasks.findByName('uploadArchives').mustRunAfter 'build'
//    tasks.findByName('closeAndPromoteRepository').mustRunAfter 'uploadArchives'

        tasks.findByName('bintrayUpload').mustRunAfter 'build'
    }
}

subprojects {
    apply plugin: 'java'

    dependencies {
        testCompile "junit:junit:$junitVersion",
                    "org.mockito:mockito-core:$mockitoVersion"
    }
}

// dependencies for this root project that creates a fat jar
dependencies {
    compile project(':console')
}

ext {
    ossrhUsername = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
    ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
}

repositories {
    mavenCentral()
    jcenter()  // Shadow resides on JCenter
}


tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task createProperties(dependsOn: processResources) << {
    // if resources dir is empty we need to create this ourselves
    new File("$buildDir/resources/main/").mkdirs()

    new File("$buildDir/resources/main/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p['timestamp'] = getTimestamp()
        p.store w, null
    }
}

def getTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S z")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(today)
}

classes {
    dependsOn createProperties
}





signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }  // only execute as part of this task
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(
                        userName: ossrhUsername,
                        password: ossrhPassword
                )
            }

            pom.project {
                name 'web3j'
                packaging 'jar'
                description 'web3j is a lightweight Java library for integration with Ethereum clients'
                url 'https://web3j.io'

                scm {
                    connection 'scm:git:https://github.com/web3j/web3j.git'
                    url 'https://github.com/web3j/web3j.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'conor10'
                        name 'Conor Svensson'
                        email 'conor10@gmail.com'
                    }
                }
            }
        }
    }
}

// Build command line library release with target distShadowZip
mainClassName = 'org.web3j.console.Runner'
applicationName = 'web3j'



